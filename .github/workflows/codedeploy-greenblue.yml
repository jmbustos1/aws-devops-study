name: Deploy to AWS CodeDeploy

on:
  workflow_dispatch:
  push:
    paths:
      - 'aws-ec2-codedeploy/**'  # Solo ejecuta el workflow cuando hay cambios en esta carpeta
      - '.github/workflows/codedeploy-greenblue.yml'  # O cuando se modifica el archivo del workflow
    branches:
      - master  # Ejecutar solo en la rama master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: aws-ec2-codedeploy/  # Establece el directorio de trabajo para los pasos

    steps:
      # 1. Checkout el código
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Configurar AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 3. Iniciar sesión en ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      # 4. Construir la imagen Docker
      - name: Build Docker image
        run: |
          docker build -t app-ecr-repository:latest .

      # 5. Etiquetar la imagen para ECR
      - name: Tag Docker image
        run: |
          docker tag app-ecr-repository:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/app-ecr-repository:latest

      # 6. Subir la imagen a ECR
      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/app-ecr-repository:latest
        
      # 7. Obtener ARN de la nueva Task Definition
      - name: Register new ECS Task Definition
        id: task-def
        run: |
          TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition frontend-task --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
        
      # 7. Registrar nueva Task Definition
      - name: Register new ECS Task Definition
        id: task-def-2
        run: |
          TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition frontend-task --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
        
      # 8. Modificar y subir AppSpec a S3
      - name: Modify AppSpec and upload to S3
        run: |
          # Reemplazar el marcador en el appspec.yml con el ARN real
          sed -i "s|<TASK_DEFINITION_ARN>|$TASK_DEF_ARN|g" appspec.yml
          
          # Verificar el contenido del archivo modificado
          echo "Modified AppSpec file:"
          cat appspec.yml
          
          # Subir el archivo modificado a S3
          aws s3 cp appspec.yml s3://snake-app-deployment-bucket/appspec.yml

      # 9. Crear despliegue en CodeDeploy
      - name: Deploy to ECS via CodeDeploy
        run: |
          # Crear el despliegue en CodeDeploy
          aws deploy create-deployment \
            --application-name frontend-deploy \
            --deployment-group-name frontend-deploy-group \
            --revision "revisionType=S3,s3Location={bucket=snake-app-deployment-bucket,key=appspec.yml,bundleType=YAML}" \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce
        env:
          AWS_DEFAULT_REGION: us-east-1